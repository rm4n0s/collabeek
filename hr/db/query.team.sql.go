// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.team.sql

package db

import (
	"context"
)

const createTeam = `-- name: CreateTeam :one
INSERT INTO team (
  name, description
) VALUES (
  $1,$2
)
RETURNING id, name, description, created_at, updated_at
`

type CreateTeamParams struct {
	Name        string
	Description string
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeam, arg.Name, arg.Description)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTeamByID = `-- name: GetTeamByID :one
select id, name, description, created_at, updated_at from team where id=$1
`

func (q *Queries) GetTeamByID(ctx context.Context, id int32) (Team, error) {
	row := q.db.QueryRowContext(ctx, getTeamByID, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTeamsPerPage = `-- name: GetTeamsPerPage :many
select id, name, description, created_at, updated_at from team 
LIMIT $1 
OFFSET (($1 * $2::int ) - $1)
`

type GetTeamsPerPageParams struct {
	Limit int32
	Page  int32
}

func (q *Queries) GetTeamsPerPage(ctx context.Context, arg GetTeamsPerPageParams) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, getTeamsPerPage, arg.Limit, arg.Page)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalTeams = `-- name: GetTotalTeams :one
select count(*) from team
`

func (q *Queries) GetTotalTeams(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalTeams)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateTeam = `-- name: UpdateTeam :exec
UPDATE team
  set name = $2,
  description = $3,
  updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateTeamParams struct {
	ID          int32
	Name        string
	Description string
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) error {
	_, err := q.db.ExecContext(ctx, updateTeam, arg.ID, arg.Name, arg.Description)
	return err
}
