// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.team_member.sql

package db

import (
	"context"
)

const createTeamMember = `-- name: CreateTeamMember :one
INSERT INTO team_member (
  member_id, team_id
) VALUES (
  $1, $2
)
RETURNING id, member_id, team_id, created_at, updated_at
`

type CreateTeamMemberParams struct {
	MemberID int32
	TeamID   int32
}

func (q *Queries) CreateTeamMember(ctx context.Context, arg CreateTeamMemberParams) (TeamMember, error) {
	row := q.db.QueryRowContext(ctx, createTeamMember, arg.MemberID, arg.TeamID)
	var i TeamMember
	err := row.Scan(
		&i.ID,
		&i.MemberID,
		&i.TeamID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTeamMember = `-- name: DeleteTeamMember :exec
DELETE FROM team_member WHERE member_id=$1 AND team_id=$2
`

type DeleteTeamMemberParams struct {
	MemberID int32
	TeamID   int32
}

func (q *Queries) DeleteTeamMember(ctx context.Context, arg DeleteTeamMemberParams) error {
	_, err := q.db.ExecContext(ctx, deleteTeamMember, arg.MemberID, arg.TeamID)
	return err
}

const getTeamMembersPerPage = `-- name: GetTeamMembersPerPage :many
select id, member_id, team_id, created_at, updated_at from team_member 
LIMIT $1 
OFFSET (($1 * $2::int ) - $1)
`

type GetTeamMembersPerPageParams struct {
	Limit int32
	Page  int32
}

func (q *Queries) GetTeamMembersPerPage(ctx context.Context, arg GetTeamMembersPerPageParams) ([]TeamMember, error) {
	rows, err := q.db.QueryContext(ctx, getTeamMembersPerPage, arg.Limit, arg.Page)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamMember
	for rows.Next() {
		var i TeamMember
		if err := rows.Scan(
			&i.ID,
			&i.MemberID,
			&i.TeamID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalTeamMembers = `-- name: GetTotalTeamMembers :one
select count(*) from team_member
`

func (q *Queries) GetTotalTeamMembers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalTeamMembers)
	var count int64
	err := row.Scan(&count)
	return count, err
}
